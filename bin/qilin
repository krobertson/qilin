#!/this/will/be/overwritten/or/wrapped/anyways/do/not/worry/ruby
# -*- encoding: binary -*-
require 'qilin/launcher'
require 'optparse'

ENV["RACK_ENV"] ||= "development"
options = {}
daemonize = false

opts = OptionParser.new("", 24, '  ') do |opts|
  cmd = File.basename($0)
  opts.banner = "Usage: #{cmd} " \
                "[ruby options] [#{cmd} options]"
  opts.separator "Ruby options:"

  lineno = 1
  opts.on("-e", "--eval LINE", "evaluate a LINE of code") do |line|
    eval line, TOPLEVEL_BINDING, "-e", lineno
    lineno += 1
  end

  opts.on("-d", "--debug", "set debugging flags (set $DEBUG to true)") do
    $DEBUG = true
  end

  opts.on("-w", "--warn", "turn warnings on for your script") do
    $-w = true
  end

  opts.on("-I", "--include PATH",
          "specify $LOAD_PATH (may be used more than once)") do |path|
    $LOAD_PATH.unshift(*path.split(/:/))
  end

  opts.on("-r", "--require LIBRARY",
          "require the library, before executing your script") do |library|
    require library
  end

  opts.separator "#{cmd} options:"

  opts.on("-E", "--env RACK_ENV",
          "use RACK_ENV for defaults (default: development)") do |e|
    ENV["RACK_ENV"] = e
  end

  opts.on("-D", "--daemonize", "run daemonized in the background") do |d|
    daemonize = !!d
  end

  opts.on("-P", "--pid FILE", "DEPRECATED") do |f|
    warn %q{Use of --pid/-P is strongly discouraged}
    warn %q{Use the 'pid' directive in the Qilin config file instead}
    options[:pid] = f
  end

  opts.on("-c", "--config-file FILE", "Qilin-specific config file") do |f|
    options[:config_file] = f
  end

  opts.separator "Common options:"

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts.to_s.gsub(/^.*DEPRECATED.*$/s, '')
    exit
  end

  opts.on_tail("-v", "--version", "Show version") do
    puts "#{cmd} v#{Qilin::VERSION}"
    exit
  end

  opts.parse! ARGV
end

if $DEBUG
  require 'pp'
  pp({
    :qilin_options => options,
    :daemonize => daemonize,
  })
end

Qilin::Launcher.daemonize!(options) if daemonize
Qilin.run(options)
